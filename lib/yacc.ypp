%{
#include <iostream>
#include <ostream>
#include <stdexcept>
#include "unification/unification.h"
using std::cout;
using std::endl;
using std::vector;
using std::string;
using std::map;
using std::runtime_error;

int yylex();
int yyerror(const char *s);

FILE *file;

extern char *yytext;
extern int line_no;

// Counter for unique variable renaming
int glob_var_count = 0;

// Clauses considered truths
vector<Clause> knowledgebase;
%}
%union {
    char * s;
    int d;
    struct Term *t;
    struct TermList *tl;
    struct Clause *c;
    struct ClauseList *cl;
}
%token <s> ATOM VARIABLE
%token <d> NUMBER
%token TRUTH CLEAR

%type <tl> termlist predicate term structure
%type <c> clause
%type <cl> clauselist predicatelist query
%%        
program : prolog '\n' program { }
        | prolog '\n' { }
        ;

prolog  : clauselist { }
        | query { doQuery($1->clauses, $1->variables, knowledgebase); }
        | TRUTH 
          {
              for(auto & clause : knowledgebase){
                  print(clause);
                  cout << ".\n";
              }
          }
        | CLEAR { knowledgebase.clear(); glob_var_count = 0; cout << "knowledgebase cleared.\n"; }
        ;

clauselist : clause 
             {
                rewriteVars(*$1, glob_var_count);
                knowledgebase.push_back(*$1);
                delete $1;
             }
           | clauselist clause
             {
                 rewriteVars(*$2, glob_var_count);
                 knowledgebase.push_back(*$2);
                 delete $2;
             }
           ;

clause : predicate '.'
         {
             $$ = newFact($1 -> terms[0]);
             delete $1;
         }
       | predicate ':' '-' predicatelist '.'
         {
             $$ = newRule($1 -> terms[0], $4 -> clauses);
             delete $1;
             delete $4;
         }
       ;
       
predicatelist : predicate { }
                {
                    ClauseList * list = newClauseList();
                    Clause * fact= newFact($1 -> terms[0]);
                    list -> clauses.push_back(*(fact));
                    list -> variables = $1 -> variables;
                    delete $1;
                    delete fact;
                    $$ = list;
                }
              | predicatelist ',' predicate
                {
                    ClauseList * list = $1;
                    Clause * fact = newFact($3 -> terms[0]);
                    list -> clauses.push_back(*(fact));
                    for(auto & var : $3 -> variables){
                        list -> variables.push_back(var);
                    }
                    delete $3;
                    delete fact;
                    $$ = list;
                }
              ;

predicate : ATOM
            {
                TermList* list = newTermList();
                Term * temp = newAtom($1);
                list -> terms.push_back(*temp);
                $$ = list;
                delete $1;
                delete temp;
            }
          | ATOM '(' termlist ')'
            {
                TermList* list = newTermList();
                Term * temp = newComplex($1, $3 -> terms);
                list -> terms.push_back(*temp);
                list -> variables = $3 -> variables;
                $$ = list;
                delete $1;
                delete $3;
                delete temp;
            }
          ;
          
termlist : term
           {
               $$ = $1;
           }
         | termlist ',' term {  }
           {
               TermList * list = $1;
               list -> terms.push_back($3->terms[0]);
               for(auto & var : $3 -> variables){
                   list -> variables.push_back(var);
               }
               delete $3;
               $$ = list;
           }
         ;
         
term : NUMBER 
       {
           TermList * list = newTermList();
           Term * temp = newNumber($1);
           list -> terms.push_back(*temp);
           $$ = list;
           delete temp;
       }
     | ATOM
       {
           TermList * list = newTermList();
           Term * temp = newAtom($1);
           list -> terms.push_back(*temp);
           $$ = list;
           delete temp;
       }
     | VARIABLE
       {
           TermList * list = newTermList();
           Term * temp = newVariable($1);
           list -> terms.push_back(*temp);
           list -> variables.push_back($1);
           $$ = list;
           delete temp;
       }
     | structure
       {
           $$ = $1;
       }
     ;

structure : ATOM '(' termlist ')'
            {
                TermList * list = newTermList();
                Term * temp = newComplex($1, $3 -> terms);
                list -> terms.push_back(*temp);
                list -> variables = $3 -> variables;
                $$ = list;
                delete temp;
                delete $1;
                delete $3;
            }
          ;
          
query : '?' '-' predicatelist '.'
        {
            $$ = $3;
        }
      ;
%%
int yyerror(const char *s)
{
    cout << "Error: " << s << " on line " << line_no << " with text " << yytext << endl;
}
